{"ast":null,"code":"var _jsxFileName = \"/Users/pradnya/Desktop/ecommerce-app/src/components/Payment.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { Elements, CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport './Payment.css';\n\n// Load Stripe with your publishable key\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst stripePromise = loadStripe('your-publishable-key-here');\nfunction Payment() {\n  _s();\n  const [isProcessing, setIsProcessing] = useState(false);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"payment-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Payment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Elements, {\n      stripe: stripePromise,\n      children: /*#__PURE__*/_jsxDEV(CheckoutForm, {\n        isProcessing: isProcessing,\n        setIsProcessing: setIsProcessing\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n}\n_s(Payment, \"23doSrFnpDt6GWBaV15L/gfAQhY=\");\n_c = Payment;\nfunction CheckoutForm({\n  isProcessing,\n  setIsProcessing\n}) {\n  _s2();\n  const stripe = useStripe();\n  const elements = useElements();\n  const [errorMessage, setErrorMessage] = useState('');\n  const handleSubmit = async event => {\n    event.preventDefault();\n    setIsProcessing(true);\n    if (!stripe || !elements) return;\n    const cardElement = elements.getElement(CardElement);\n    try {\n      // Call backend to create a payment intent\n      const response = await fetch('http://localhost:5000/create-payment-intent', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          amount: 5000\n        }) // Replace 5000 with dynamic totalAmount in cents\n      });\n      const {\n        clientSecret\n      } = await response.json();\n      const paymentResult = await stripe.confirmCardPayment(clientSecret, {\n        payment_method: {\n          card: cardElement\n        }\n      });\n      if (paymentResult.error) {\n        setErrorMessage(paymentResult.error.message);\n      } else {\n        alert('Payment successful!');\n      }\n    } catch (error) {\n      setErrorMessage('Payment failed. Try again.');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    className: \"checkout-form\",\n    children: [/*#__PURE__*/_jsxDEV(CardElement, {\n      className: \"card-element\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      disabled: !stripe || isProcessing,\n      className: \"payment-button\",\n      children: isProcessing ? 'Processing...' : 'Pay Now'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n_s2(CheckoutForm, \"TyJnv3yVrBeH1XI1RpAtfAjjgcg=\", false, function () {\n  return [useStripe, useElements];\n});\n_c2 = CheckoutForm;\nexport default Payment;\nvar _c, _c2;\n$RefreshReg$(_c, \"Payment\");\n$RefreshReg$(_c2, \"CheckoutForm\");","map":{"version":3,"names":["React","useState","loadStripe","Elements","CardElement","useStripe","useElements","jsxDEV","_jsxDEV","stripePromise","Payment","_s","isProcessing","setIsProcessing","className","children","fileName","_jsxFileName","lineNumber","columnNumber","stripe","CheckoutForm","_c","_s2","elements","errorMessage","setErrorMessage","handleSubmit","event","preventDefault","cardElement","getElement","response","fetch","method","headers","body","JSON","stringify","amount","clientSecret","json","paymentResult","confirmCardPayment","payment_method","card","error","message","alert","onSubmit","type","disabled","_c2","$RefreshReg$"],"sources":["/Users/pradnya/Desktop/ecommerce-app/src/components/Payment.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { Elements, CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport './Payment.css';\n\n// Load Stripe with your publishable key\nconst stripePromise = loadStripe('your-publishable-key-here');\n\nfunction Payment() {\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  return (\n    <div className=\"payment-container\">\n      <h2>Payment</h2>\n      <Elements stripe={stripePromise}>\n        <CheckoutForm isProcessing={isProcessing} setIsProcessing={setIsProcessing} />\n      </Elements>\n    </div>\n  );\n}\n\nfunction CheckoutForm({ isProcessing, setIsProcessing }) {\n  const stripe = useStripe();\n  const elements = useElements();\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    setIsProcessing(true);\n\n    if (!stripe || !elements) return;\n\n    const cardElement = elements.getElement(CardElement);\n\n    try {\n      // Call backend to create a payment intent\n      const response = await fetch('http://localhost:5000/create-payment-intent', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ amount: 5000 }), // Replace 5000 with dynamic totalAmount in cents\n      });\n      const { clientSecret } = await response.json();\n\n      const paymentResult = await stripe.confirmCardPayment(clientSecret, {\n        payment_method: { card: cardElement },\n      });\n\n      if (paymentResult.error) {\n        setErrorMessage(paymentResult.error.message);\n      } else {\n        alert('Payment successful!');\n      }\n    } catch (error) {\n      setErrorMessage('Payment failed. Try again.');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"checkout-form\">\n      <CardElement className=\"card-element\" />\n      <button type=\"submit\" disabled={!stripe || isProcessing} className=\"payment-button\">\n        {isProcessing ? 'Processing...' : 'Pay Now'}\n      </button>\n      {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\n    </form>\n  );\n}\n\nexport default Payment;\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,UAAU,QAAQ,mBAAmB;AAC9C,SAASC,QAAQ,EAAEC,WAAW,EAAEC,SAAS,EAAEC,WAAW,QAAQ,yBAAyB;AACvF,OAAO,eAAe;;AAEtB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,aAAa,GAAGP,UAAU,CAAC,2BAA2B,CAAC;AAE7D,SAASQ,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACjB,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAEvD,oBACEO,OAAA;IAAKM,SAAS,EAAC,mBAAmB;IAAAC,QAAA,gBAChCP,OAAA;MAAAO,QAAA,EAAI;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChBX,OAAA,CAACL,QAAQ;MAACiB,MAAM,EAAEX,aAAc;MAAAM,QAAA,eAC9BP,OAAA,CAACa,YAAY;QAACT,YAAY,EAAEA,YAAa;QAACC,eAAe,EAAEA;MAAgB;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAEV;AAACR,EAAA,CAXQD,OAAO;AAAAY,EAAA,GAAPZ,OAAO;AAahB,SAASW,YAAYA,CAAC;EAAET,YAAY;EAAEC;AAAgB,CAAC,EAAE;EAAAU,GAAA;EACvD,MAAMH,MAAM,GAAGf,SAAS,CAAC,CAAC;EAC1B,MAAMmB,QAAQ,GAAGlB,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACmB,YAAY,EAAEC,eAAe,CAAC,GAAGzB,QAAQ,CAAC,EAAE,CAAC;EAEpD,MAAM0B,YAAY,GAAG,MAAOC,KAAK,IAAK;IACpCA,KAAK,CAACC,cAAc,CAAC,CAAC;IACtBhB,eAAe,CAAC,IAAI,CAAC;IAErB,IAAI,CAACO,MAAM,IAAI,CAACI,QAAQ,EAAE;IAE1B,MAAMM,WAAW,GAAGN,QAAQ,CAACO,UAAU,CAAC3B,WAAW,CAAC;IAEpD,IAAI;MACF;MACA,MAAM4B,QAAQ,GAAG,MAAMC,KAAK,CAAC,6CAA6C,EAAE;QAC1EC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,MAAM,EAAE;QAAK,CAAC,CAAC,CAAE;MAC1C,CAAC,CAAC;MACF,MAAM;QAAEC;MAAa,CAAC,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MAE9C,MAAMC,aAAa,GAAG,MAAMtB,MAAM,CAACuB,kBAAkB,CAACH,YAAY,EAAE;QAClEI,cAAc,EAAE;UAAEC,IAAI,EAAEf;QAAY;MACtC,CAAC,CAAC;MAEF,IAAIY,aAAa,CAACI,KAAK,EAAE;QACvBpB,eAAe,CAACgB,aAAa,CAACI,KAAK,CAACC,OAAO,CAAC;MAC9C,CAAC,MAAM;QACLC,KAAK,CAAC,qBAAqB,CAAC;MAC9B;IACF,CAAC,CAAC,OAAOF,KAAK,EAAE;MACdpB,eAAe,CAAC,4BAA4B,CAAC;IAC/C,CAAC,SAAS;MACRb,eAAe,CAAC,KAAK,CAAC;IACxB;EACF,CAAC;EAED,oBACEL,OAAA;IAAMyC,QAAQ,EAAEtB,YAAa;IAACb,SAAS,EAAC,eAAe;IAAAC,QAAA,gBACrDP,OAAA,CAACJ,WAAW;MAACU,SAAS,EAAC;IAAc;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACxCX,OAAA;MAAQ0C,IAAI,EAAC,QAAQ;MAACC,QAAQ,EAAE,CAAC/B,MAAM,IAAIR,YAAa;MAACE,SAAS,EAAC,gBAAgB;MAAAC,QAAA,EAChFH,YAAY,GAAG,eAAe,GAAG;IAAS;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrC,CAAC,EACRM,YAAY,iBAAIjB,OAAA;MAAGM,SAAS,EAAC,eAAe;MAAAC,QAAA,EAAEU;IAAY;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5D,CAAC;AAEX;AAACI,GAAA,CA/CQF,YAAY;EAAA,QACJhB,SAAS,EACPC,WAAW;AAAA;AAAA8C,GAAA,GAFrB/B,YAAY;AAiDrB,eAAeX,OAAO;AAAC,IAAAY,EAAA,EAAA8B,GAAA;AAAAC,YAAA,CAAA/B,EAAA;AAAA+B,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}